/*
 * ChaTex Web API
 *
 * The Web API for ChaTex
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.SwaggerGen;
using IO.Swagger.Attributes;
using IO.Swagger.Models;
using WebAPI.Authentication;
using Business.Chats;
using System.Linq;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class ChatsApiController : Controller
    {
        private readonly IChatManager chatManager;

        public ChatsApiController(IChatManager chatManager)
        {
            this.chatManager = chatManager;
        }

        /// <summary>
        /// Add users to a chat
        /// </summary>
        /// <remarks>This will add a list of users to a specific chat</remarks>
        /// <param name="addUsersToChatDTO">Users to be added to a chat</param>
        /// <response code="204">Users added to chat successfully</response>
        [HttpPost]
        [Route("/1.0.0/chats/users")]
        [ValidateModelState]
        [SwaggerOperation("ChatsAddUsersToChat")]
        [ServiceFilter(typeof(ChaTexAuthorization))]
        public virtual IActionResult ChatsAddUsersToChat([FromBody]AddUsersToChatDTO addUsersToChatDTO)
        {
            int callerId = (int)HttpContext.Items[ChaTexAuthorization.UserIdKey];

            chatManager.AddUsersToChat(chatId: (int)addUsersToChatDTO.ChatId,
            userIds: addUsersToChatDTO.UserIds.Where(x => x != null).Select(x => x.Value).ToList());

            return StatusCode(204);
        }

        /// <summary>
        /// Create a new chat with only the caller as a member
        /// </summary>

        /// <param name="chatName"></param>
        /// <response code="200">The chat was created successfully</response>
        [HttpPost]
        [Route("/1.0.0/chats")]
        [ValidateModelState]
        [SwaggerOperation("ChatsCreateChat")]
        [SwaggerResponse(200, typeof(ChatDTO), "The chat was created successfully")]
        [ServiceFilter(typeof(ChaTexAuthorization))]
        public virtual IActionResult ChatsCreateChat([FromBody]string chatName)
        {
            int callerId = (int)HttpContext.Items[ChaTexAuthorization.UserIdKey];

            if (string.IsNullOrEmpty(chatName))
            {
                return BadRequest("Chat name must be specified");
            }

            int? chatId = chatManager.CreateChat(userId: callerId, chatName: chatName);

            if (chatId == null)
            {
                HttpContext.Response.StatusCode = 403;
                return new ObjectResult("Could not create chat");
            }

            return new ObjectResult(new ChatDTO()
            {
                Id = chatId,
                Name = chatName,
                Users = new List<UserDTO>()
            });
        }

        /// <summary>
        /// Get alle chats for the user
        /// </summary>
        /// <remarks>Gets all chats for the specific user id</remarks>
        /// <param name="userId">The id of the user</param>
        /// <response code="200">Chats was returned successfully</response>
        [HttpGet]
        [Route("/1.0.0/chats/users/{userId}")]
        [ValidateModelState]
        [SwaggerOperation("ChatsGetAllChatsForUser")]
        [SwaggerResponse(200, typeof(List<ChatDTO>), "Chats was returned successfully")]
        [ServiceFilter(typeof(ChaTexAuthorization))]
        public virtual IActionResult ChatsGetAllChatsForUser([FromRoute]int? userId)
        {
            throw new NotImplementedException("This feature is not yet implemented.");
        }

        /// <summary>
        /// Get a list of all messages in a chat
        /// </summary>

        /// <param name="chatId">The id of the message to get</param>
        /// <response code="200">Messages was returned successfully</response>
        [HttpGet]
        [Route("/1.0.0/chats/{chatId}")]
        [ValidateModelState]
        [SwaggerOperation("ChatsGetMessagesInChat")]
        [SwaggerResponse(200, typeof(List<GetMessageDTO>), "Messages was returned successfully")]
        [ServiceFilter(typeof(ChaTexAuthorization))]
        public virtual IActionResult ChatsGetMessagesInChat([FromRoute]int? chatId)
        {
            throw new NotImplementedException("This feature is not yet implemented.");
        }
    }
}
