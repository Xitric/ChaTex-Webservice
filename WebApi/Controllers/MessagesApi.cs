/*
 * ChaTex Web API
 *
 * The Web API for ChaTex
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.SwaggerGen;
using IO.Swagger.Attributes;
using IO.Swagger.Models;
using WebAPI.Authentication;
using Business.Messages;
using WebAPI.Models.Mappers;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class MessagesApiController : Controller
    {
        private readonly IMessageManager messageManager;

        public MessagesApiController(IMessageManager messageManager)
        {
            this.messageManager = messageManager;
        }

        /// <summary>
        /// Create a new message in the specified channel
        /// </summary>

        /// <param name="channelId">The id of the channel to post the message to</param>
        /// <param name="messageContent">The content of the message</param>
        /// <response code="204">The message was posted successfully</response>
        [HttpPost]
        [Route("/1.0.0/channels/{channelId}/messages")]
        [ValidateModelState]
        [SwaggerOperation("MessagesCreateMessage")]
        [ServiceFilter(typeof(ChaTexAuthorization))]
        public virtual IActionResult MessagesCreateMessage([FromRoute]int? channelId, [FromBody]string messageContent)
        {
            int callerId = (int)HttpContext.Items[ChaTexAuthorization.UserIdKey];

            if (messageContent.Length == 0)
            {
                return BadRequest("Message content must be specified");
            }

            try
            {
                messageManager.CreateMessage(callerId, (int)channelId, messageContent);

                return NoContent();
            }
            catch (ArgumentException e)
            {
                switch (e.ParamName)
                {
                    case "callerId":
                        //Caller was not authorized
                        return StatusCode(401);
                    case "channelId":
                        //Channel did not exist
                        return NotFound(e.Message);
                    default:
                        //Some unexpected exception
                        return StatusCode(500);
                }
            }
        }

        /// <summary>
        /// Delete a message
        /// </summary>

        /// <param name="messageId">The id of the message to delete</param>
        /// <response code="204">Message deleted successfully</response>
        [HttpDelete]
        [Route("/1.0.0/messages/{messageId}")]
        [ValidateModelState]
        [SwaggerOperation("MessagesDeleteMessage")]
        [ServiceFilter(typeof(ChaTexAuthorization))]
        public virtual IActionResult MessagesDeleteMessage([FromRoute]int? messageId)
        {
            int callerId = (int)HttpContext.Items[ChaTexAuthorization.UserIdKey];

            try
            {
                messageManager.DeleteMessage(callerId, (int)messageId);

                return NoContent();
            }
            catch (ArgumentException e)
            {
                switch (e.ParamName)
                {
                    case "callerId":
                        //Caller was not authorized
                        return StatusCode(401);
                    case "messageId":
                        //Message was unknown
                        return NotFound($"The message with id {messageId} was not found");
                    default:
                        //Some unexpected exception
                        return StatusCode(500);
                }
            }
        }

        /// <summary>
        /// Edit a message
        /// </summary>
        /// <remarks>Edit the message with the specified id</remarks>
        /// <param name="messageId">The id of the message to edit</param>
        /// <param name="newContent">The new content of the message</param>
        /// <response code="204">Message edited successfully</response>
        [HttpPut]
        [Route("/1.0.0/messages/{messageId}")]
        [ValidateModelState]
        [SwaggerOperation("MessagesEditMessage")]
        [ServiceFilter(typeof(ChaTexAuthorization))]
        public virtual IActionResult MessagesEditMessage([FromRoute]int? messageId, [FromBody]string newContent)
        {
            int callerId = (int)HttpContext.Items[ChaTexAuthorization.UserIdKey];

            if (newContent.Length == 0)
            {
                return BadRequest("Message content must be specified");
            }

            try
            {
                messageManager.EditMessage(callerId, (int)messageId, newContent);

                return NoContent();
            }
            catch (ArgumentException e)
            {
                switch (e.ParamName)
                {
                    case "callerId":
                        //Caller was not authorized
                        return StatusCode(401);
                    case "messageId":
                        //Message was unknown
                        return NotFound($"The message with id {messageId} was not found");
                    default:
                        //Some unexpected exception
                        return StatusCode(500);
                }
            }
        }

        /// <summary>
        /// Get a message
        /// </summary>
        /// <remarks>Get the message with the specified id</remarks>
        /// <param name="messageId">The id of the message to get</param>
        /// <response code="200">Message was returned successfully</response>
        [HttpGet]
        [Route("/1.0.0/messages/{messageId}")]
        [ValidateModelState]
        [SwaggerOperation("MessagesGetMessage")]
        [SwaggerResponse(200, typeof(GetMessageDTO), "Message was returned successfully")]
        [ServiceFilter(typeof(ChaTexAuthorization))]
        public virtual IActionResult MessagesGetMessage([FromRoute]int? messageId)
        {
            int callerId = (int)HttpContext.Items[ChaTexAuthorization.UserIdKey];

            if (messageId == null)
            {
                return BadRequest("Message id must be specified");
            }

            try
            {
                GetMessageDTO message = MessageMapper.MapMessageToGetMessageDTO(messageManager.GetMessage(callerId, (int)messageId), callerId);
                return new ObjectResult(message);
            }
            catch (ArgumentException e)
            {
                switch (e.ParamName)
                {
                    case "callerId":
                        //Caller was not authorized
                        return StatusCode(401);
                    case "messageId":
                        return NotFound($"The message with id {messageId} was not found");
                    default:
                        //Some unexpected exception
                        return StatusCode(500);
                }
            }
        }

        /// <summary>
        /// Get some of the messages from a specific channel
        /// </summary>

        /// <param name="channelId">The id of the channel to get messages from</param>
        /// <param name="before">The point in time to get messages before. Put differently, this specifies the latest possible creation time of messages to get. This defaults to the current time, meaning that the latest message will be returned</param>
        /// <param name="count">The amount of messages to get. This defaults to 25</param>
        /// <response code="200">Messages fetched successfully</response>
        [HttpGet]
        [Route("/1.0.0/channels/{channelId}/messages")]
        [ValidateModelState]
        [SwaggerOperation("MessagesGetMessages")]
        [SwaggerResponse(200, typeof(List<GetMessageDTO>), "Messages fetched successfully")]
        [ServiceFilter(typeof(ChaTexAuthorization))]
        public virtual IActionResult MessagesGetMessages([FromRoute]int? channelId, [FromQuery]DateTime? before, [FromQuery]int? count)
        {
            /*
            int callerId = (int)HttpContext.Items[ChaTexAuthorization.UserIdKey];

            if (channelId == null)
            {
                return BadRequest("Channel id must be specified");
            }

            if (fromIndex == null)
            {
                fromIndex = 0;
            }

            if (count == null)
            {
                count = 25;
            }

            try
            {
                IEnumerable<GetMessageDTO> messages = messageManager.GetMessages((int)channelId, callerId, (int)fromIndex, (int)count)
                .Select(m => MessageMapper.MapMessageToGetMessageDTO(m, callerId));

                return new ObjectResult(messages);
            }
            catch (ArgumentException e)
            {
                switch (e.ParamName)
                {
                    case "callerId":
                        //Caller was not authorized
                        return StatusCode(401);
                    case "channelId":
                        return NotFound($"The channel with id {channelId} was not found");
                    default:
                        //Some unexpected exception
                        return StatusCode(500);
                }
            }
            */
            return null;
        }
    }
}
