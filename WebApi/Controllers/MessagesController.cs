/*
 * ChaTex Web API
 *
 * The Web API for ChaTex
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.SwaggerGen;
using Business.Messages;
using Business.Models;
using WebAPI.Models;
using WebAPI.Mappers;

namespace WebAPI.Controllers
{
    [Route("api/[controller]")]
    public class MessagesController : Controller
    {
        private readonly IMessageManager messageManager;
        private readonly IModelFactory modelFactory;
        private readonly DTOMapper dtoMapper;

        public MessagesController(IMessageManager messageManager, IModelFactory modelFactory)
        {
            this.messageManager = messageManager;
            this.modelFactory = modelFactory;
            dtoMapper = new DTOMapper();
        }

        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>Send a message to the server</remarks>
        /// <param name="message">The message object</param>
        /// <response code="201">message created successfully</response>
        [HttpPost]
        [Route("/1.0.0/messages")]
        [SwaggerOperation("CreateMessage")]
        [SwaggerResponse(200, type: typeof(GetMessage))]
        public virtual IActionResult CreateMessage([FromBody]PostMessage message)
        {
            if (message == null)
            {
                return BadRequest("No message specified!");
            }

            IUser user = modelFactory.CreateUser(message.Author, null, null, null, null);
            IMessage msg = modelFactory.CreateMessage(null, message.Content, user, null);
            IMessage result = messageManager.PostMessage(msg);

            GetMessage dtoResponse = dtoMapper.ConvertMessage(result);
            return CreatedAtRoute("GetMessage", new { messageID = dtoResponse.Id }, dtoResponse);
        }

        /// <summary>
        /// Find message by ID
        /// </summary>
        /// <remarks>Returns a message with the specified ID</remarks>
        /// <param name="messageID">ID of the message to fetch</param>
        /// <response code="200">Successful operation</response>
        /// <response code="404">Message not found</response>
        [HttpGet]
        [Route("/1.0.0/messages/{messageID}", Name = "GetMessage")]
        [SwaggerOperation("GetMessageByID")]
        [SwaggerResponse(200, type: typeof(GetMessage))]
        public virtual IActionResult GetMessageByID([FromRoute]long? messageID)
        {
            if (messageID == null)
            {
                return BadRequest("A message id must be specified!");
            }

            IMessage message = messageManager.GetMessage((long)messageID);

            if (message == null)
            {
                return NotFound($"No message with the id {messageID} was found.");
            }

            GetMessage dtoResponse = dtoMapper.ConvertMessage(message);
            return new ObjectResult(dtoResponse);
        }


        /// <summary>
        /// Get all messages
        /// </summary>
        /// <remarks>Returns all messages in the database</remarks>
        /// <response code="200">Successful operation</response>
        [HttpGet]
        [Route("/1.0.0/messages")]
        [SwaggerOperation("GetMessages")]
        [SwaggerResponse(200, type: typeof(List<GetMessage>))]
        public virtual IActionResult GetMessages()
        {
            throw new NotSupportedException();
        }


        /// <summary>
        /// Wait for and get the next message
        /// </summary>
        /// <remarks>Blocking call that will wait for the next message to be sent to the server. Once a message arrives, it will be returned.</remarks>
        /// <param name="since"></param>
        /// <response code="200">Successful operation</response>
        [HttpGet]
        [Route("/1.0.0/messages/wait")]
        [SwaggerOperation("WaitMessage")]
        [SwaggerResponse(200, type: typeof(List<GetMessage>))]
        public virtual IActionResult WaitMessage([FromQuery]DateTime? since)
        {
            throw new NotSupportedException();
        }
    }
}
