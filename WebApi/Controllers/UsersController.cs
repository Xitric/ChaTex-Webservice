/*
 * ChaTex Web API
 *
 * The Web API for ChaTex
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.SwaggerGen;
using WebAPI.Models;
using Business.Messages;
using WebAPI.Mappers;
using Business.Models;
using System.Linq;

namespace WebAPI.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class UsersController : Controller
    {
        private readonly IMessageManager messageManager;
        private readonly DTOMapper dtoMapper;

        public UsersController(IMessageManager messageManager)
        {
            this.messageManager = messageManager;
            dtoMapper = new DTOMapper();
        }

        /// <summary>
        /// Get the available groups to a user.
        /// </summary>
        /// <remarks>Get the available groups to the user with the specified ID.</remarks>
        /// <param name="userID">ID of the user</param>
        /// <response code="200">Successfully retrieved the user&#39;s groups</response>
        [HttpGet]
        [Route("/1.0.0/users/{userID}/groups")]
        [SwaggerOperation("GetGroupsForUser")]
        [SwaggerResponse(200, type: typeof(List<Group>))]
        public virtual IActionResult GetGroupsForUser([FromRoute]long? userID)
        {
            if (userID == null)
            {
                return BadRequest("A user id must be specified!");
            }

            List<IGroup> groups = messageManager.GetGroupsForUser((long)userID);
            List<Group> dtoResponse = groups.Select(g => dtoMapper.ConvertGroup(g)).ToList();

            return new ObjectResult(dtoResponse);
        }
    }
}
