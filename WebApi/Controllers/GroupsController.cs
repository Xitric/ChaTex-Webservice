/*
 * ChaTex Web API
 *
 * The Web API for ChaTex
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.SwaggerGen;
using WebAPI.Mappers;
using Business.Groups;
using System;
using WebAPI.Authentication;

namespace WebAPI.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class GroupsController : Controller
    {
        private readonly IGroupManager groupManager;
        private readonly DTOMapper dtoMapper;

        private long? userId;

        public GroupsController(IGroupManager groupManager)
        {
            this.groupManager = groupManager;
            dtoMapper = new DTOMapper();
        }

        /// <summary>
        /// Create a new group
        /// </summary>
        /// <remarks>Creates a new group with the caller as the group administrator</remarks>
        /// <param name="groupName">The name of the group</param>
        /// <param name="allowEmployeeSticky">Whether employees are allowed to make sticky messages</param>
        /// <param name="allowEmployeeAcknowledgeable">Whether employees are allowed to make acknowledgeable messages</param>
        /// <param name="allowEmployeeBookmark">Whether employees are allowed to make bookmarks</param>
        /// <response code="204">The group was created, and the group administrator was successfully added</response>
        /// <response code="400">Bad input</response>
        /// <response code="403">The user was not authorized to access this resource</response>
        [HttpPost]
        [Route("/1.0.0/groups")]
        [SwaggerOperation("CreateGroup")]
        public virtual StatusCodeResult CreateGroup([FromQuery]string groupName, [FromQuery]bool? allowEmployeeSticky, [FromQuery]bool? allowEmployeeAcknowledgeable, [FromQuery]bool? allowEmployeeBookmark)
        {
            int? userId = (int?)HttpContext.Items[RequestAuthenticator.UserIdKey];
            if (userId == null)
            {
                return StatusCode(403);
            }

            groupManager.CreateGroup(userId: (int)userId, groupName: groupName,
                                     allowEmployeeSticky: (bool)allowEmployeeSticky,
                                     allowEmployeeAcknowledgeable: (bool)allowEmployeeAcknowledgeable,
                                     allowEmployeeBookmark: (bool)allowEmployeeBookmark);
            return StatusCode(204);
        }

        /// <summary>
        /// Delete a group
        /// </summary>
        /// <remarks>Deletes the group with the specified id</remarks>
        /// <param name="groupId"></param>
        /// <response code="204">Group deleted successfully</response>
        /// <response code="404">No group with the specified id exists</response>
        /// <response code="403">The user was not authorized to access this resource</response>
        [HttpDelete]
        [Route("/1.0.0/groups/{groupId}")]
        [SwaggerOperation("DeleteGroup")]
        public virtual StatusCodeResult DeleteGroup([FromRoute]int? groupId)
        {
            int? userId = (int?)HttpContext.Items[RequestAuthenticator.UserIdKey];
            if (userId == null)
            {
                return StatusCode(403);
            }

            throw new NotImplementedException();
        }
    }
}
