/*
 * ChaTex Web API
 *
 * The Web API for ChaTex
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.SwaggerGen;
using System.Linq;
using WebAPI.Mappers;
using Business.Groups;
using System;
using WebAPI.Authentication;
using System.Collections.Generic;

namespace WebAPI.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class GroupsController : Controller
    {
        private readonly IGroupManager groupManager;
        private readonly DTOMapper dtoMapper;

        private long? userId;

        public GroupsController(IGroupManager groupManager)
        {
            this.groupManager = groupManager;
            dtoMapper = new DTOMapper();
        }

        /// <summary>
        /// Create a new group
        /// </summary>
        /// <remarks>Creates a new group with the caller as the group administrator</remarks>
        /// <param name="groupName">The name of the group</param>
        /// <param name="allowEmployeeSticky">Whether employees are allowed to make sticky messages</param>
        /// <param name="allowEmployeeAcknowledgeable">Whether employees are allowed to make acknowledgeable messages</param>
        /// <param name="allowEmployeeBookmark">Whether employees are allowed to make bookmarks</param>
        /// <response code="204">The group was created, and the group administrator was successfully added</response>
        /// <response code="400">Bad input</response>
        /// <response code="401">The user was not authorized to access this resource</response>
        [HttpPost]
        [Route("/1.0.0/groups")]
        [SwaggerOperation("CreateGroup")]
        [ServiceFilter(typeof(ChaTexAuthorization))]
        public virtual StatusCodeResult CreateGroup([FromQuery]string groupName, [FromQuery]bool? allowEmployeeSticky, [FromQuery]bool? allowEmployeeAcknowledgeable, [FromQuery]bool? allowEmployeeBookmark)
        {
            int? userId = (int?)HttpContext.Items[ChaTexAuthorization.UserIdKey];

            if (string.IsNullOrEmpty(groupName))
            {
                return StatusCode(400);
            }

            groupManager.CreateGroup(userId: (int)userId, groupName: groupName,
                                     allowEmployeeSticky: (bool)allowEmployeeSticky,
                                     allowEmployeeAcknowledgeable: (bool)allowEmployeeAcknowledgeable,
                                     allowEmployeeBookmark: (bool)allowEmployeeBookmark);
            return StatusCode(204);
        }

        /// <summary>
        /// Delete a group
        /// </summary>
        /// <remarks>Deletes the group with the specified id</remarks>
        /// <param name="groupId"></param>
        /// <response code="204">Group deleted successfully</response>
        /// <response code="404">No group with the specified id exists</response>
        /// <response code="401">The user was not authorized to access this resource</response>
        [HttpDelete]
        [Route("/1.0.0/groups/{groupId}")]
        [SwaggerOperation("DeleteGroup")]
        [ServiceFilter(typeof(ChaTexAuthorization))]
        public virtual StatusCodeResult DeleteGroup([FromRoute]int? groupId)
        {
            int? userId = (int?)HttpContext.Items[ChaTexAuthorization.UserIdKey];

            if (groupId == null)
            {
                return StatusCode(404);
            }


            if (groupManager.DeleteGroup((int)groupId) == true)
            {
                return StatusCode(204);
            }
            else
            {
                return StatusCode(404);
            }
        }

        /// <summary>
        /// Add users to a group
        /// </summary>
        /// <remarks>This will add a list of users to a specific group</remarks>
        /// <param name="groupId">The Id of the group</param>
        /// <param name="userIds">The Ids of all the users</param>
        /// <response code="204">Users added to group successfully</response>
        /// <response code="401">The user was not authorized to access this resource</response>
        /// <response code="404">No group or user with the specified ids exists</response>
        [HttpPost]
        [Route("/1.0.0/groups/users")]
        [SwaggerOperation("AddUsersToGroup")]
        public virtual IActionResult AddUsersToGroup([FromQuery]int? groupId, [FromBody]List<int?> userIds)
        {
            int? userId = (int?)HttpContext.Items[ChaTexAuthorization.UserIdKey];

            if (groupId == null)
            {
                return StatusCode(404);
            }

            //If our list of users is null, or if it contains any element that is null
            if (userIds == null || userIds.Exists(x => x == null))
            {
                return StatusCode(404);
            }

            //Add user (also convert list of nullable ints, to list of ints)
            try
            {
                groupManager.AddUsersToGroup(groupId: (int)groupId,
                                             userIds: userIds.Where(x => x != null).Select(x => x.Value).ToList(),
                                             loggedInUser: (int)userId);
            }
            catch (Exception)
            {
                return StatusCode(403);
            }
            return StatusCode(204);

        }

        /// <summary>
        /// Delete a list of users from a group
        /// </summary>
        /// <remarks>This will delete a list of users from the specific group</remarks>
        /// <param name="groupId">The Id of the group</param>
        /// <param name="userIds">The Ids of all the users</param>
        /// <response code="204">Users deleted from the group successfully</response>
        /// <response code="401">The user was not authorized to access this resource</response>
        /// <response code="404">No group or user with the specified ids exists</response>
        [HttpDelete]
        [Route("/1.0.0/groups/users")]
        [SwaggerOperation("DeleteUsersFromGroup")]
        public virtual IActionResult DeleteUsersFromGroup([FromQuery]int? groupId, [FromBody]List<int?> userIds)
        {
            int? userId = (int?)HttpContext.Items[ChaTexAuthorization.UserIdKey];

            if (groupId == null)
            {
                return StatusCode(404);
            }

            //If our list of users is null, or if it contains any element that is null
            if (userIds == null || userIds.Exists(x => x == null))
            {
                return StatusCode(404);
            }

            //Add user (also convert list of nullable ints, to list of ints)
            groupManager.RemoveUsersFromGroups(groupId: (int)groupId, userIds: userIds.Where(x => x != null).Select(x => x.Value).ToList());
            return StatusCode(204);
        }

        /// <summary>
        /// Add access rights for roles to a group
        /// </summary>
        /// <remarks>This will add access rights for a list of roles to a specific group</remarks>
        /// <param name="groupId">The Id of the group</param>
        /// <param name="roleIds">The Ids of all the roles</param>
        /// <response code="204">Roles added to group successfully</response>
        /// <response code="401">The user was not authorized to access this resource</response>
        /// <response code="404">No group or role with the specified ids exists</response>
        [HttpPost]
        [Route("/1.0.0/groups/roles")]
        [SwaggerOperation("AddRolesToGroup")]
        public virtual void AddRolesToGroup([FromQuery]int? groupId, [FromBody]List<int?> roleIds)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Remove access rights for roles from a group
        /// </summary>
        /// <remarks>This will remove access for a list of roles from a specific group</remarks>
        /// <param name="groupId">The Id of the group</param>
        /// <param name="roleIds">The Ids of all the roles</param>
        /// <response code="204">Roles deleted from the group successfully</response>
        /// <response code="401">The user was not authorized to access this resource</response>
        /// <response code="404">No group or role with the specified ids exists</response>
        [HttpDelete]
        [Route("/1.0.0/groups/roles")]
        [SwaggerOperation("DeleteRolesFromGroup")]
        public virtual void DeleteRolesFromGroup([FromQuery]int? groupId, [FromBody]List<int?> roleIds)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Mark or unmark a user as administrator
        /// </summary>
        /// <remarks>Give a group member administrator rights or remove administrator rights from a group administrator</remarks>
        /// <param name="groupId">The id of the group to affect</param>
        /// <param name="userId">The id of the user to mark or unmark</param>
        /// <param name="isAdministrator">true to mark the user as group administrator, false to unmark</param>
        /// <response code="200">User marked or unmarked successfully</response>
        /// <response code="401">The user was not authorized to access this resource</response>
        /// <response code="404">No group or group user with the specified ids were found</response>
        [HttpPut]
        [Route("/1.0.0/groups/{groupId}/{userId}")]
        [SwaggerOperation("MarkUserAsAdministrator")]
        public virtual void MarkUserAsAdministrator([FromRoute]int? groupId, [FromRoute]int? userId, [FromQuery]bool? isAdministrator)
        {
            throw new NotImplementedException();
        }
    }
}
