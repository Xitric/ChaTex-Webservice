/*
 * ChaTex Web API
 *
 * The Web API for ChaTex
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AddRolesToGroupDTO :  IEquatable<AddRolesToGroupDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddRolesToGroupDTO" /> class.
        /// </summary>
        /// <param name="GroupId">GroupId (required).</param>
        /// <param name="RoleIds">RoleIds (required).</param>
        public AddRolesToGroupDTO(int? GroupId = null, List<int?> RoleIds = null)
        {
            // to ensure "GroupId" is required (not null)
            if (GroupId == null)
            {
                throw new InvalidDataException("GroupId is a required property for AddRolesToGroupDTO and cannot be null");
            }
            else
            {
                this.GroupId = GroupId;
            }
            // to ensure "RoleIds" is required (not null)
            if (RoleIds == null)
            {
                throw new InvalidDataException("RoleIds is a required property for AddRolesToGroupDTO and cannot be null");
            }
            else
            {
                this.RoleIds = RoleIds;
            }
            
        }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name="groupId")]
        public int? GroupId { get; set; }

        /// <summary>
        /// Gets or Sets RoleIds
        /// </summary>
        [DataMember(Name="roleIds")]
        public List<int?> RoleIds { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddRolesToGroupDTO {\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  RoleIds: ").Append(RoleIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((AddRolesToGroupDTO)obj);
        }

        /// <summary>
        /// Returns true if AddRolesToGroupDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of AddRolesToGroupDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddRolesToGroupDTO other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.GroupId == other.GroupId ||
                    this.GroupId != null &&
                    this.GroupId.Equals(other.GroupId)
                ) && 
                (
                    this.RoleIds == other.RoleIds ||
                    this.RoleIds != null &&
                    this.RoleIds.SequenceEqual(other.RoleIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.GroupId != null)
                    hash = hash * 59 + this.GroupId.GetHashCode();
                if (this.RoleIds != null)
                    hash = hash * 59 + this.RoleIds.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(AddRolesToGroupDTO left, AddRolesToGroupDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AddRolesToGroupDTO left, AddRolesToGroupDTO right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
