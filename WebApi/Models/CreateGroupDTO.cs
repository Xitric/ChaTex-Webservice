/*
 * ChaTex Web API
 *
 * The Web API for ChaTex
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace WebAPI.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateGroupDTO :  IEquatable<CreateGroupDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateGroupDTO" /> class.
        /// </summary>
        /// <param name="GroupName">GroupName (required).</param>
        /// <param name="AllowEmployeeSticky">AllowEmployeeSticky (required).</param>
        /// <param name="AllowEmployeeAcknowledgeable">AllowEmployeeAcknowledgeable (required).</param>
        /// <param name="AllowEmployeeBookmark">AllowEmployeeBookmark (required).</param>
        public CreateGroupDTO(string GroupName = null, bool? AllowEmployeeSticky = null, bool? AllowEmployeeAcknowledgeable = null, bool? AllowEmployeeBookmark = null)
        {
            // to ensure "GroupName" is required (not null)
            if (GroupName == null)
            {
                throw new InvalidDataException("GroupName is a required property for CreateGroupDTO and cannot be null");
            }
            else
            {
                this.GroupName = GroupName;
            }
            // to ensure "AllowEmployeeSticky" is required (not null)
            if (AllowEmployeeSticky == null)
            {
                throw new InvalidDataException("AllowEmployeeSticky is a required property for CreateGroupDTO and cannot be null");
            }
            else
            {
                this.AllowEmployeeSticky = AllowEmployeeSticky;
            }
            // to ensure "AllowEmployeeAcknowledgeable" is required (not null)
            if (AllowEmployeeAcknowledgeable == null)
            {
                throw new InvalidDataException("AllowEmployeeAcknowledgeable is a required property for CreateGroupDTO and cannot be null");
            }
            else
            {
                this.AllowEmployeeAcknowledgeable = AllowEmployeeAcknowledgeable;
            }
            // to ensure "AllowEmployeeBookmark" is required (not null)
            if (AllowEmployeeBookmark == null)
            {
                throw new InvalidDataException("AllowEmployeeBookmark is a required property for CreateGroupDTO and cannot be null");
            }
            else
            {
                this.AllowEmployeeBookmark = AllowEmployeeBookmark;
            }
            
        }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name="groupName")]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets AllowEmployeeSticky
        /// </summary>
        [DataMember(Name="allowEmployeeSticky")]
        public bool? AllowEmployeeSticky { get; set; }

        /// <summary>
        /// Gets or Sets AllowEmployeeAcknowledgeable
        /// </summary>
        [DataMember(Name="allowEmployeeAcknowledgeable")]
        public bool? AllowEmployeeAcknowledgeable { get; set; }

        /// <summary>
        /// Gets or Sets AllowEmployeeBookmark
        /// </summary>
        [DataMember(Name="allowEmployeeBookmark")]
        public bool? AllowEmployeeBookmark { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateGroupDTO {\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  AllowEmployeeSticky: ").Append(AllowEmployeeSticky).Append("\n");
            sb.Append("  AllowEmployeeAcknowledgeable: ").Append(AllowEmployeeAcknowledgeable).Append("\n");
            sb.Append("  AllowEmployeeBookmark: ").Append(AllowEmployeeBookmark).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CreateGroupDTO)obj);
        }

        /// <summary>
        /// Returns true if CreateGroupDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateGroupDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateGroupDTO other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.GroupName == other.GroupName ||
                    this.GroupName != null &&
                    this.GroupName.Equals(other.GroupName)
                ) && 
                (
                    this.AllowEmployeeSticky == other.AllowEmployeeSticky ||
                    this.AllowEmployeeSticky != null &&
                    this.AllowEmployeeSticky.Equals(other.AllowEmployeeSticky)
                ) && 
                (
                    this.AllowEmployeeAcknowledgeable == other.AllowEmployeeAcknowledgeable ||
                    this.AllowEmployeeAcknowledgeable != null &&
                    this.AllowEmployeeAcknowledgeable.Equals(other.AllowEmployeeAcknowledgeable)
                ) && 
                (
                    this.AllowEmployeeBookmark == other.AllowEmployeeBookmark ||
                    this.AllowEmployeeBookmark != null &&
                    this.AllowEmployeeBookmark.Equals(other.AllowEmployeeBookmark)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.GroupName != null)
                    hash = hash * 59 + this.GroupName.GetHashCode();
                if (this.AllowEmployeeSticky != null)
                    hash = hash * 59 + this.AllowEmployeeSticky.GetHashCode();
                if (this.AllowEmployeeAcknowledgeable != null)
                    hash = hash * 59 + this.AllowEmployeeAcknowledgeable.GetHashCode();
                if (this.AllowEmployeeBookmark != null)
                    hash = hash * 59 + this.AllowEmployeeBookmark.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CreateGroupDTO left, CreateGroupDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateGroupDTO left, CreateGroupDTO right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
