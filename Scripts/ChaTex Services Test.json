{
	"info": {
		"name": "ChaTex Services Test",
		"_postman_id": "00e1d734-aeae-b526-c900-f6a22407fc5a",
		"description": "Tests of the ChaTex API. This test ensures that all web services return the correct status codes when receiving both good and bad requests.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Channels",
			"description": "Tests for the ChannelsApi",
			"item": [
				{
					"name": "Channels/Groups/Channels-AuthenticatedGroupAdministrator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Create a temporary group for this tets run",
									"const createGroupRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/groups\",",
									"  method:   \"POST\",",
									"  header:   [ \"token:\" + pm.environment.get(\"token\"), \"Content-Type:application/json\"],",
									"  body: {",
									"      mode: \"raw\",",
									"      raw: JSON.stringify({",
									"          groupName: \"Postman test group\",",
									"          allowEmployeeSticky: true,",
									"          allowEmployeeAcknowledgeable: true,",
									"          allowEmployeeBookmark: true",
									"      })",
									"  }",
									"};",
									"",
									"pm.sendRequest(createGroupRequest, function(err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.environment.set(\"testGroupId\", res.json().id);",
									"    }",
									"});"
								],
								"id": "b4840a5f-23fa-4ddc-a569-2d765125d4bc",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//Ensure that the channel exists in the group",
									"const getGroupInfoRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/users/me/groups\",",
									"  method:   \"GET\",",
									"  header:   \"token:\" + pm.environment.get(\"token\"),",
									"};",
									"",
									"pm.sendRequest(getGroupInfoRequest, function(err, res) {",
									"    var channel;",
									"    ",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        for (i = 0; i < res.json().length; i++) {",
									"            if (res.json()[i].id === pm.environment.get(\"testGroupId\")) {",
									"                channel = res.json()[i].channels[0];",
									"            }",
									"        }",
									"    }",
									"    ",
									"    pm.test(\"Channel was successfully created\", function() {",
									"        pm.expect(channel).to.not.be.null;",
									"        pm.expect(channel.name).to.equal(\"Test channel name\");",
									"        ",
									"        pm.environment.set(\"testChannelId\", channel.id);",
									"    });",
									"});"
								],
								"id": "9a497fb8-6ac6-485f-a72d-f00a2f81c252",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"Test channel name\""
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/channels",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"channels"
							]
						},
						"description": "Tests that it is possible to create a channel in a group that the client is an administrator of."
					},
					"response": []
				},
				{
					"name": "Channels/Groups/Channels-AuthenticatedGroupNotAdministrator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get member token",
									"const getTokenRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/users/login\",",
									"  method:   \"Post\",",
									"  header:   \"Content-Type:application/json\",",
									"  body: {",
									"      mode: \"raw\",",
									"      raw: JSON.stringify({ email: \"kdavi16@student.sdu.dk\", password: \"abc123\"})",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, function(err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.environment.set(\"memberToken\", res.json());",
									"    }",
									"});"
								],
								"id": "3f11c40d-a664-4249-83b2-55cf375a5932",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "6ec55b36-9b34-48d7-aa3f-8ea12958a87f",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{memberToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"Test channel name\""
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/channels",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"channels"
							]
						},
						"description": "Tests that it is not possible to create a channel in a group that the client is just a member of."
					},
					"response": []
				},
				{
					"name": "Channels/Groups/Channels-AuthenticatedGroupBadId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "da2972fc-7ddd-4ca9-ab99-14f0b3bbec86",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "578ec4db-4e12-4023-afd6-a4b280c1e60b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"Test channel name\""
						},
						"url": {
							"raw": "{{chatex}}/groups/0/channels",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"0",
								"channels"
							]
						},
						"description": "Tests that it is not possible to create a channel in a group that does not exist."
					},
					"response": []
				},
				{
					"name": "Channels-AuthenticatedNotAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "9a3390d6-132c-4ef8-b7ca-a1fcc980d0eb",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{memberToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"New channel name from Postman here\""
						},
						"url": {
							"raw": "{{chatex}}/channels/{{testChannelId}}",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"{{testChannelId}}"
							]
						},
						"description": "Tests that it is not possible for a group member to edit names of channels."
					},
					"response": []
				},
				{
					"name": "Channels-AuthenticatedBadId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"id": "423b378e-4e15-47af-ac22-5669c92a55cc",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"New channel name from Postman here again\""
						},
						"url": {
							"raw": "{{chatex}}/channels/0",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"0"
							]
						},
						"description": "Tests that it is not possible to rename a channel that does not exist."
					},
					"response": []
				},
				{
					"name": "Channels-AuthenticatedAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//Ensure that the channel was actually renamed",
									"const getGroupInfoRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/users/me/groups\",",
									"  method:   \"GET\",",
									"  header:   \"token:\" + pm.environment.get(\"token\"),",
									"};",
									"",
									"pm.sendRequest(getGroupInfoRequest, function(err, res) {",
									"    var channel;",
									"    ",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        for (i = 0; i < res.json().length; i++) {",
									"            if (res.json()[i].id == pm.environment.get(\"testGroupId\")) {",
									"                channel = res.json()[i].channels[0];",
									"            }",
									"        }",
									"    }",
									"    ",
									"    pm.test(\"Channel was successfully renamed\", function() {",
									"        pm.expect(channel.name).to.equal(\"New channel name from Postman\");",
									"    });",
									"});"
								],
								"id": "ad84a279-dc9a-4617-99c4-bc577cb828fa",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"New channel name from Postman\""
						},
						"url": {
							"raw": "{{chatex}}/channels/{{testChannelId}}",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"{{testChannelId}}"
							]
						},
						"description": "Tests that it is possible for a group administrator to edit names of channels."
					},
					"response": []
				},
				{
					"name": "Channels-AuthenticatedBadId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"id": "34ac8fe0-1418-4b29-a60c-67ccc0c8e5cd",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/channels/0",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"0"
							]
						},
						"description": "Tests that it is not possible to delete a channel that does not exist."
					},
					"response": []
				},
				{
					"name": "Channels-AuthenticatedNotAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "9fbbdd7c-1a26-4647-9519-8a0415799115",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{memberToken}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/channels/{{testChannelId}}",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"{{testChannelId}}"
							]
						},
						"description": "Tests that it is not possible to delete a channel in a group that the client is not an administrator of."
					},
					"response": []
				},
				{
					"name": "Channels-AuthenticatedAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//Ensure that the channel no longer exists",
									"const getGroupInfoRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/users/me/groups\",",
									"  method:   \"GET\",",
									"  header:   \"token:\" + pm.environment.get(\"token\"),",
									"};",
									"",
									"pm.sendRequest(getGroupInfoRequest, function(err, res) {",
									"    var channels;",
									"    ",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        for (i = 0; i < res.json().length; i++) {",
									"            if (res.json()[i].id == pm.environment.get(\"testGroupId\")) {",
									"                channels = res.json()[i].channels;",
									"            }",
									"        }",
									"    }",
									"    ",
									"    pm.test(\"Channel was successfully deleted\", function() {",
									"        pm.expect(channels.length).to.equal(0);",
									"    });",
									"});"
								],
								"id": "c253fd32-d9df-4ef1-bab0-c90403b201d8",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/channels/{{testChannelId}}",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"{{testChannelId}}"
							]
						},
						"description": "Tests that it is possible for a group administrator to delete a channel in a group that the client is an administrator of."
					},
					"response": []
				}
			]
		},
		{
			"name": "Groups",
			"description": "Tests for the GroupsApi",
			"item": [
				{
					"name": "Groups-AuthenticatedInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"id": "f0a79ec2-9d3e-4e38-8b02-28626861f9d9",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"groupName\": \"Postman dedicated test group\",\r\n  \"allowEmployeeAcknowledgeable\": false,\r\n  \"allowEmployeeBookmark\": true\r\n}"
						},
						"url": {
							"raw": "{{chatex}}/groups",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups"
							]
						},
						"description": "Tests that it is not possible to create a group when specifying invalid information."
					},
					"response": []
				},
				{
					"name": "Groups-AuthenticatedEmpty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"id": "32e5eb6d-268f-4c70-af71-25e0f92a3ec7",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/groups",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups"
							]
						},
						"description": "Tests that it is not possible to create a group when specifying an empty body."
					},
					"response": []
				},
				{
					"name": "Groups-AuthenticatedValid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"testGroupId\", pm.response.json().id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"required\": [",
									"\t\t\"id\",",
									"\t\t\"name\"",
									"\t],",
									"\t\"type\": \"object\",",
									"\t\"properties\": {",
									"\t\t\"id\": {",
									"\t\t\t\"format\": \"int32\",",
									"\t\t\t\"description\": \"Gets or Sets Id\",",
									"\t\t\t\"type\": \"integer\"",
									"\t\t},",
									"\t\t\"name\": {",
									"\t\t\t\"description\": \"Gets or Sets Name\",",
									"\t\t\t\"type\": \"string\"",
									"\t\t},",
									"\t\t\"channels\": {",
									"\t\t\t\"description\": \"Gets or Sets Channels\",",
									"\t\t\t\"type\": \"array\",",
									"\t\t\t\"items\": {",
									"\t\t\t\t\"required\": [",
									"    \t\t\t\t\"id\",",
									"    \t\t\t\t\"name\"",
									"    \t\t\t],",
									"    \t\t\t\"type\": \"object\",",
									"    \t\t\t\"properties\": {",
									"    \t\t\t\t\"id\": {",
									"    \t\t\t\t\t\"format\": \"int32\",",
									"    \t\t\t\t\t\"description\": \"Gets or Sets Id\",",
									"    \t\t\t\t\t\"type\": \"integer\"",
									"    \t\t\t\t},",
									"    \t\t\t\t\"name\": {",
									"    \t\t\t\t\t\"description\": \"Gets or Sets Name\",",
									"    \t\t\t\t\t\"type\": \"string\"",
									"    \t\t\t\t}",
									"    \t\t\t}",
									"\t\t\t}",
									"\t\t}",
									"\t}",
									"}",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);",
									"",
									"//Ensure that the created group has the correct name",
									"pm.test(\"Group name is correct\", function () {",
									"    pm.expect(pm.response.json().name).to.equal(\"Postman dedicated test group\");",
									"});"
								],
								"id": "524fc433-2744-454b-943a-81af233ff0a3",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"groupName\": \"Postman dedicated test group\",\r\n  \"allowEmployeeSticky\": true,\r\n  \"allowEmployeeAcknowledgeable\": false,\r\n  \"allowEmployeeBookmark\": true\r\n}"
						},
						"url": {
							"raw": "{{chatex}}/groups",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups"
							]
						},
						"description": "Tests that it is possible to create a group when specifying valid information."
					},
					"response": []
				},
				{
					"name": "Groups-NoToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"id": "b7d7b1f3-7001-43c3-8e35-ca6203f07b20",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"groupName\": \"Postman dedicated test group\",\r\n  \"allowEmployeeSticky\": true,\r\n  \"allowEmployeeAcknowledgeable\": false,\r\n  \"allowEmployeeBookmark\": true\r\n}"
						},
						"url": {
							"raw": "{{chatex}}/groups",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups"
							]
						},
						"description": "Tests that it is possible to create a group when not logged in."
					},
					"response": []
				},
				{
					"name": "Groups/Roles-AuthenticatedBadId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "aa113369-256d-483b-ad59-f1e1a753be1c",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 1, 2 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/0/roles",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"0",
								"roles"
							]
						},
						"description": "Tests that it is not possible to add roles to a nonexistent group."
					},
					"response": []
				},
				{
					"name": "Groups/Roles-AuthenticatedNotAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "aa113369-256d-483b-ad59-f1e1a753be1c",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 1, 2 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/70/roles",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"70",
								"roles"
							]
						},
						"description": "Tests that it is not possible to add roles to a group that the client is not an administrator of."
					},
					"response": []
				},
				{
					"name": "Groups/Roles-AuthenticatedAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"id": "ebe8c392-0f10-4b65-a272-ee6a8933a3e0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 1, 2 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/roles",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"roles"
							]
						},
						"description": "Tests that it is possible to add roles to a group that the client is an administrator of."
					},
					"response": []
				},
				{
					"name": "Groups/Roles-AuthenticatedAdministratorDuplicates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"id": "ebe8c392-0f10-4b65-a272-ee6a8933a3e0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 1 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/roles",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"roles"
							]
						},
						"description": "Tests that it is possible to add roles to a group that the client is an administrator of, even if those roles are already in the group."
					},
					"response": []
				},
				{
					"name": "Groups/Roles-Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"required\": [",
									"    \t\t\"id\",",
									"    \t\t\"name\",",
									"    \t\t\"isDeleted\"",
									"    \t],",
									"    \t\"type\": \"object\",",
									"    \t\"properties\": {",
									"    \t\t\"id\": {",
									"    \t\t\t\"format\": \"int32\",",
									"    \t\t\t\"description\": \"Gets or Sets Id\",",
									"    \t\t\t\"type\": \"integer\"",
									"    \t\t},",
									"    \t\t\"name\": {",
									"    \t\t\t\"description\": \"Gets or Sets Name\",",
									"    \t\t\t\"type\": \"string\"",
									"    \t\t},",
									"    \t\t\"isDeleted\": {",
									"    \t\t\t\"description\": \"Gets or Sets IsDeleted\",",
									"    \t\t\t\"type\": \"boolean\"",
									"    \t\t}",
									"    \t}",
									"    }",
									"}",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);",
									"",
									"//Ensure that the correct roles were retrieved",
									"var expectedRoleIds = [ 1, 2 ];",
									"var actualRoleIds = [];",
									"",
									"for (i = 0; i < pm.response.json().length; i++) {",
									"    actualRoleIds.push(pm.response.json()[i].id);",
									"}",
									"",
									"pm.test('Correct roles retrieved', function() {",
									"    var noUnmatchedRole = true;",
									"    for (var role in expectedRoleIds) {",
									"        if (actualRoleIds.indexOf(role) === -1) {",
									"            unmatchedRole = false;",
									"        }",
									"    }",
									"    ",
									"    var sameNumber = (expectedRoleIds.length === actualRoleIds.length);",
									"    ",
									"    pm.expect(noUnmatchedRole && sameNumber).to.be.true;",
									"});"
								],
								"id": "982354f4-66ee-4d93-9616-ef8144e1e480",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 1, 2 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/roles",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"roles"
							]
						},
						"description": "Tests that it is possible to retrieve roles from a group."
					},
					"response": []
				},
				{
					"name": "Groups/Roles-AuthenticatedBadId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that no roles were retrieved",
									"pm.test(\"No roles were retrieved\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(0);",
									"});"
								],
								"id": "6dcad496-83a6-40aa-9015-ca6b195284e1",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 1, 2 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/0/roles",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"0",
								"roles"
							]
						},
						"description": "Tests that it is not possible to retrieve roles from a nonexistent group."
					},
					"response": []
				},
				{
					"name": "Groups/Roles-AuthenticatedGroupDeleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that no roles were retrieved",
									"pm.test(\"No roles were retrieved\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(0);",
									"});"
								],
								"id": "b219bcdd-09cf-41c4-b6f3-57a2498ca534",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 1, 2 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/126/roles",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"126",
								"roles"
							]
						},
						"description": "Tests that it is not possible to retrieve roles from a deleted group."
					},
					"response": []
				},
				{
					"name": "Groups/Roles-AuthenticatedBadId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ed70c3c-9e08-40ba-a626-9139450f22ab",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 2 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/0/roles",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"0",
								"roles"
							]
						},
						"description": "Tests that it is not possible to remove roles from a nonexistent group."
					},
					"response": []
				},
				{
					"name": "Groups/Roles-AuthenticatedNotAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "8ed70c3c-9e08-40ba-a626-9139450f22ab",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 2 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/70/roles",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"70",
								"roles"
							]
						},
						"description": "Tests that it is not possible to remove roles from a group that the client is not an administrator of."
					},
					"response": []
				},
				{
					"name": "Groups/Roles-AuthenticatedAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"id": "e301462d-1503-44d0-94d7-280092e36cf9",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 2 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/roles",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"roles"
							]
						},
						"description": "Tests that it is possible to remove roles from a group that the client is an administrator of, if those roles are in the group."
					},
					"response": []
				},
				{
					"name": "Groups/Roles-AuthenticatedAdministratorBadRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"id": "e301462d-1503-44d0-94d7-280092e36cf9",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 2 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/roles",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"roles"
							]
						},
						"description": "Tests that it is possible to request removal of roles from a group that the client is an administrator of, even if those roles are not in the group."
					},
					"response": []
				},
				{
					"name": "Groups/Roles-AuthenticatedAfterDelete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd419ce2-c39c-4ec3-9f34-804fc8c7798a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"required\": [",
									"    \t\t\"id\",",
									"    \t\t\"name\",",
									"    \t\t\"isDeleted\"",
									"    \t],",
									"    \t\"type\": \"object\",",
									"    \t\"properties\": {",
									"    \t\t\"id\": {",
									"    \t\t\t\"format\": \"int32\",",
									"    \t\t\t\"description\": \"Gets or Sets Id\",",
									"    \t\t\t\"type\": \"integer\"",
									"    \t\t},",
									"    \t\t\"name\": {",
									"    \t\t\t\"description\": \"Gets or Sets Name\",",
									"    \t\t\t\"type\": \"string\"",
									"    \t\t},",
									"    \t\t\"isDeleted\": {",
									"    \t\t\t\"description\": \"Gets or Sets IsDeleted\",",
									"    \t\t\t\"type\": \"boolean\"",
									"    \t\t}",
									"    \t}",
									"    }",
									"}",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);",
									"",
									"//Ensure that the correct roles were retrieved",
									"var expectedRoleIds = [ 1 ];",
									"var actualRoleIds = [];",
									"",
									"for (i = 0; i < pm.response.json().length; i++) {",
									"    actualRoleIds.push(pm.response.json()[i].id);",
									"}",
									"",
									"pm.test('Correct roles retrieved', function() {",
									"    var noUnmatchedRole = true;",
									"    for (var role in expectedRoleIds) {",
									"        if (actualRoleIds.indexOf(role) === -1) {",
									"            unmatchedRole = false;",
									"        }",
									"    }",
									"    ",
									"    var sameNumber = (expectedRoleIds.length === actualRoleIds.length);",
									"    ",
									"    pm.expect(noUnmatchedRole && sameNumber).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 1, 2 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/roles",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"roles"
							]
						},
						"description": "Tests that it is possible to retrieve roles from a group, and that previous operations with deleting roles were successful."
					},
					"response": []
				},
				{
					"name": "Groups/Users-AuthenticatedBadId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71fba700-dba0-4e2f-bc53-18b9afa6578c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 11 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/0/users",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"0",
								"users"
							]
						},
						"description": "Tests that it is not possible to add users to a nonexistent group."
					},
					"response": []
				},
				{
					"name": "Groups/Users-AuthenticatedNotAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcf40c3f-51c8-414a-a802-9cd1077970a3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 11 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/70/users",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"70",
								"users"
							]
						},
						"description": "Tests that it is not possible to add users to a group that the client is not an administrator of."
					},
					"response": []
				},
				{
					"name": "Groups/Users-AuthenticatedAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"id": "ebe8c392-0f10-4b65-a272-ee6a8933a3e0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 11 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/users",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"users"
							]
						},
						"description": "Tests that it is possible to add users to a group that the client is an administrator of."
					},
					"response": []
				},
				{
					"name": "Groups/Users-AuthenticatedAdministratorDuplicates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"id": "ebe8c392-0f10-4b65-a272-ee6a8933a3e0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 11 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/users",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"users"
							]
						},
						"description": "Tests that it is possible to add users to a group that the client is an administrator of, even if those users are already in the group."
					},
					"response": []
				},
				{
					"name": "Groups/Users/GroupUsers-Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f927d39a-179c-4c41-9854-651e400634cf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"required\": [",
									"\t\t\t\"id\",",
									"\t\t\t\"firstName\",",
									"\t\t\t\"lastName\",",
									"\t\t\t\"email\",",
									"\t\t\t\"me\"",
									"\t\t],",
									"\t\t\"type\": \"object\",",
									"\t\t\"properties\": {",
									"\t\t\t\"id\": {",
									"\t\t\t\t\"format\": \"int32\",",
									"\t\t\t\t\"description\": \"Gets or Sets Id\",",
									"\t\t\t\t\"type\": \"integer\"",
									"\t\t\t},",
									"\t\t\t\"firstName\": {",
									"\t\t\t\t\"description\": \"Gets or Sets FirstName\",",
									"\t\t\t\t\"type\": \"string\"",
									"\t\t\t},",
									"\t\t\t\"middleInitial\": {",
									"\t\t\t\t\"description\": \"Gets or Sets MiddleInitial\",",
									"\t\t\t\t\"type\": [ \"string\", \"null\" ]",
									"\t\t\t},",
									"\t\t\t\"lastName\": {",
									"\t\t\t\t\"description\": \"Gets or Sets LastName\",",
									"\t\t\t\t\"type\": \"string\"",
									"\t\t\t},",
									"\t\t\t\"email\": {",
									"\t\t\t\t\"description\": \"Gets or Sets Email\",",
									"\t\t\t\t\"type\": \"string\"",
									"\t\t\t},",
									"\t\t\t\"me\": {",
									"\t\t\t\t\"description\": \"Gets or Sets Me\",",
									"\t\t\t\t\"type\": \"boolean\"",
									"\t\t\t},",
									"\t\t\t\"isDeleted\": {",
									"\t\t\t\t\"description\": \"Gets or Sets IsDeleted\",",
									"\t\t\t\t\"type\": \"boolean\"",
									"\t\t\t}",
									"\t\t}",
									"    }",
									"}",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);",
									"",
									"//Ensure that the correct users were retrieved",
									"var expectedUserIds = [ 6, 11 ];",
									"var actualUserIds = [];",
									"",
									"for (i = 0; i < pm.response.json().length; i++) {",
									"    actualUserIds.push(pm.response.json()[i].id);",
									"}",
									"",
									"pm.test('Correct users retrieved', function() {",
									"    var noUnmatchedUser = true;",
									"    for (var user in expectedUserIds) {",
									"        if (actualUserIds.indexOf(user) === -1) {",
									"            unmatchedUser = false;",
									"        }",
									"    }",
									"    ",
									"    var sameNumber = (expectedUserIds.length === actualUserIds.length);",
									"    ",
									"    pm.expect(noUnmatchedUser && sameNumber).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 11 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/groupUsers",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"groupUsers"
							]
						},
						"description": "Tests that it is possible to retrieve users from a group."
					},
					"response": []
				},
				{
					"name": "Groups/Users/GroupUsers-AuthenticatedBadId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9a0b045-680a-4891-ac8b-e88259c10870",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that no users were retrieved",
									"pm.test(\"No users were retrieved\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(0);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0149ab12-2088-4be9-b373-c049f805552f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 11 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/0/groupUsers",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"0",
								"groupUsers"
							]
						},
						"description": "Tests that it is not possible to retrieve users from a nonexistent group."
					},
					"response": []
				},
				{
					"name": "Groups/Users/GroupUsers-AuthenticatedGroupDeleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9a0b045-680a-4891-ac8b-e88259c10870",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that no users were retrieved",
									"pm.test(\"No users were retrieved\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(0);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 11 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/126/groupUsers",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"126",
								"groupUsers"
							]
						},
						"description": "Tests that it is not possible to retrieve users from a deleted group."
					},
					"response": []
				},
				{
					"name": "Groups/Users-AuthenticatedBadId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "508dfe70-bc9e-4e5b-91d9-cc4e33429730",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 11 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/0/users",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"0",
								"users"
							]
						},
						"description": "Tests that it is not possible to remove users from a nonexistent group."
					},
					"response": []
				},
				{
					"name": "Groups/Users-AuthenticatedNotAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "508dfe70-bc9e-4e5b-91d9-cc4e33429730",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 11 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/70/users",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"70",
								"users"
							]
						},
						"description": "Tests that it is not possible to remove users from a group that the client is not an administrator of."
					},
					"response": []
				},
				{
					"name": "Groups/Users-AuthenticatedAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05f1ad2f-619a-4e76-95ab-e80a6b448197",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 11 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/users",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"users"
							]
						},
						"description": "Tests that it is possible to remove users from a group that the client is an administrator of."
					},
					"response": []
				},
				{
					"name": "Groups/Users-AuthenticatedAdministratorBadUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05f1ad2f-619a-4e76-95ab-e80a6b448197",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 11 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/users",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"users"
							]
						},
						"description": "Tests that it is possible to remove users from a group that the client is an administrator of, even if the users are not in the group."
					},
					"response": []
				},
				{
					"name": "Groups/Users/GroupUsers-AuthenticatedAfterDelete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "813bbe25-5a94-44b9-8e59-80482d79745c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"required\": [",
									"\t\t\t\"id\",",
									"\t\t\t\"firstName\",",
									"\t\t\t\"lastName\",",
									"\t\t\t\"email\",",
									"\t\t\t\"me\"",
									"\t\t],",
									"\t\t\"type\": \"object\",",
									"\t\t\"properties\": {",
									"\t\t\t\"id\": {",
									"\t\t\t\t\"format\": \"int32\",",
									"\t\t\t\t\"description\": \"Gets or Sets Id\",",
									"\t\t\t\t\"type\": \"integer\"",
									"\t\t\t},",
									"\t\t\t\"firstName\": {",
									"\t\t\t\t\"description\": \"Gets or Sets FirstName\",",
									"\t\t\t\t\"type\": \"string\"",
									"\t\t\t},",
									"\t\t\t\"middleInitial\": {",
									"\t\t\t\t\"description\": \"Gets or Sets MiddleInitial\",",
									"\t\t\t\t\"type\": [ \"string\", \"null\" ]",
									"\t\t\t},",
									"\t\t\t\"lastName\": {",
									"\t\t\t\t\"description\": \"Gets or Sets LastName\",",
									"\t\t\t\t\"type\": \"string\"",
									"\t\t\t},",
									"\t\t\t\"email\": {",
									"\t\t\t\t\"description\": \"Gets or Sets Email\",",
									"\t\t\t\t\"type\": \"string\"",
									"\t\t\t},",
									"\t\t\t\"me\": {",
									"\t\t\t\t\"description\": \"Gets or Sets Me\",",
									"\t\t\t\t\"type\": \"boolean\"",
									"\t\t\t},",
									"\t\t\t\"isDeleted\": {",
									"\t\t\t\t\"description\": \"Gets or Sets IsDeleted\",",
									"\t\t\t\t\"type\": \"boolean\"",
									"\t\t\t}",
									"\t\t}",
									"    }",
									"}",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);",
									"",
									"//Ensure that the correct users were retrieved",
									"var expectedUserIds = [ 6 ];",
									"var actualUserIds = [];",
									"",
									"for (i = 0; i < pm.response.json().length; i++) {",
									"    actualUserIds.push(pm.response.json()[i].id);",
									"}",
									"",
									"pm.test('Correct users retrieved', function() {",
									"    var noUnmatchedUser = true;",
									"    for (var user in expectedUserIds) {",
									"        if (actualUserIds.indexOf(user) === -1) {",
									"            unmatchedUser = false;",
									"        }",
									"    }",
									"    ",
									"    var sameNumber = (expectedUserIds.length === actualUserIds.length);",
									"    ",
									"    pm.expect(noUnmatchedUser && sameNumber).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[ 11 ]"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/groupUsers",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"groupUsers"
							]
						},
						"description": "Tests that it is possible to retrieve users from a group, and that previous operations with deleting users were successful."
					},
					"response": []
				},
				{
					"name": "Groups/Users-Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "676622e2-a2ae-4f5e-9ca7-b81914afc530",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"required\": [",
									"\t\t\t\"id\",",
									"\t\t\t\"firstName\",",
									"\t\t\t\"lastName\",",
									"\t\t\t\"email\",",
									"\t\t\t\"me\"",
									"\t\t],",
									"\t\t\"type\": \"object\",",
									"\t\t\"properties\": {",
									"\t\t\t\"id\": {",
									"\t\t\t\t\"format\": \"int32\",",
									"\t\t\t\t\"description\": \"Gets or Sets Id\",",
									"\t\t\t\t\"type\": \"integer\"",
									"\t\t\t},",
									"\t\t\t\"firstName\": {",
									"\t\t\t\t\"description\": \"Gets or Sets FirstName\",",
									"\t\t\t\t\"type\": \"string\"",
									"\t\t\t},",
									"\t\t\t\"middleInitial\": {",
									"\t\t\t\t\"description\": \"Gets or Sets MiddleInitial\",",
									"\t\t\t\t\"type\": [ \"string\", \"null\" ]",
									"\t\t\t},",
									"\t\t\t\"lastName\": {",
									"\t\t\t\t\"description\": \"Gets or Sets LastName\",",
									"\t\t\t\t\"type\": \"string\"",
									"\t\t\t},",
									"\t\t\t\"email\": {",
									"\t\t\t\t\"description\": \"Gets or Sets Email\",",
									"\t\t\t\t\"type\": \"string\"",
									"\t\t\t},",
									"\t\t\t\"me\": {",
									"\t\t\t\t\"description\": \"Gets or Sets Me\",",
									"\t\t\t\t\"type\": \"boolean\"",
									"\t\t\t},",
									"\t\t\t\"isDeleted\": {",
									"\t\t\t\t\"description\": \"Gets or Sets IsDeleted\",",
									"\t\t\t\t\"type\": \"boolean\"",
									"\t\t\t}",
									"\t\t}",
									"    }",
									"}",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);",
									"",
									"//Ensure that the correct users were retrieved",
									"var expectedUserIds = [ 6, 11 ];",
									"var actualUserIds = [];",
									"",
									"for (i = 0; i < pm.response.json().length; i++) {",
									"    actualUserIds.push(pm.response.json()[i].id);",
									"}",
									"",
									"pm.test('Correct users retrieved', function() {",
									"    var noUnmatchedUser = true;",
									"    for (var user in expectedUserIds) {",
									"        if (actualUserIds.indexOf(user) === -1) {",
									"            unmatchedUser = false;",
									"        }",
									"    }",
									"    ",
									"    var sameNumber = (expectedUserIds.length === actualUserIds.length);",
									"    ",
									"    pm.expect(noUnmatchedUser && sameNumber).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/users",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"users"
							]
						},
						"description": "Tests that it is possible to retrieve users in a group both based on direct group members and group roles."
					},
					"response": []
				},
				{
					"name": "Groups/Users-AuthenticatedBadID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f99fce94-f28a-4289-9b38-4812f6e47b54",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/groups/0/users",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"0",
								"users"
							]
						},
						"description": "Tests that it is not possible to retrieve users in a nonexistent group based on direct group members and group roles."
					},
					"response": []
				},
				{
					"name": "Groups/Users-AuthenticatedGroupDeleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5598ca05-19e9-432c-9869-f660c9fd927c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/groups/126/users",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"126",
								"users"
							]
						},
						"description": "Tests that it is not possible to retrieve users in a deleted group based on direct group members and group roles."
					},
					"response": []
				}
			]
		},
		{
			"name": "Chats",
			"description": "Tests for the ChatsApi",
			"item": []
		},
		{
			"name": "Messages",
			"description": "Tests for the MessagesApi",
			"item": [
				{
					"name": "Messages/Channels/Messages-Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"type\" : \"array\",",
									"    \"items\" : {",
									"        \"required\": [",
									"    \t\t\"id\",",
									"    \t\t\"creationTime\",",
									"    \t\t\"content\",",
									"    \t\t\"sender\"",
									"    \t],",
									"    \t\"type\": \"object\",",
									"    \t\"properties\": {",
									"    \t\t\"id\": {",
									"    \t\t\t\"format\": \"int32\",",
									"    \t\t\t\"type\": \"integer\"",
									"    \t\t},",
									"    \t\t\"creationTime\": {",
									"    \t\t\t\"format\": \"date-time\",",
									"    \t\t\t\"type\": \"string\"",
									"    \t\t},",
									"    \t\t\"content\": {",
									"    \t\t\t\"type\": \"string\"",
									"    \t\t},",
									"    \t\t\"deletionDate\": {",
									"    \t\t\t\"format\": \"date-time\",",
									"    \t\t\t\"type\": [ \"string\", \"null\" ]",
									"    \t\t},",
									"    \t\t\"lastEdited\": {",
									"    \t\t\t\"format\": \"date-time\",",
									"    \t\t\t\"type\": [ \"string\", \"null\" ]",
									"    \t\t},",
									"    \t\t\"sender\": {",
									"    \t\t\t\"required\": [ \"id\", \"firstName\", \"lastName\", \"email\", \"me\" ],",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": {",
									"                        \"format\": \"int32\",",
									"                        \"type\": \"integer\"",
									"                    },",
									"                    \"firstName\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"middleInitial\": {",
									"                        \"type\": [ \"string\", \"null\" ]",
									"                    },",
									"                    \"lastName\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"email\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"me\": {",
									"                        \"type\": \"boolean\"",
									"                    },",
									"                    \"isDeleted\": {",
									"                        \"type\": \"boolean\"",
									"                    }",
									"                }",
									"    \t\t}",
									"    \t}",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);",
									"",
									"//Ensure that the messages come before the specified time stamp",
									"pm.test('Messages were created before the specified timestamp', function() {",
									"    var beforeDate = new Date(pm.environment.get(\"beforeDate\"));",
									"    ",
									"    for (i = 0; i < pm.response.json().length; i++) {",
									"        var creationDate = new Date(pm.response.json()[i].creationTime);",
									"        pm.expect(creationDate < beforeDate).to.be.true;",
									"    }",
									"});",
									"",
									"//Ensure that the messages are received in the correct order (oldest to newest)",
									"pm.test('Messages were received in the correct order', function() {",
									"    var lastDate = new Date(pm.response.json()[0].creationTime);",
									"    ",
									"    for (i = 1; i < pm.response.json().length; i++) {",
									"        var nowDate = new Date(pm.response.json()[i].creationTime);",
									"        pm.expect(lastDate < nowDate).to.be.true;",
									"        lastDate = nowDate;",
									"    }",
									"});",
									"",
									"//Ensure that 10 messages were fetched",
									"pm.test('Received the correct number of messages', function() {",
									"    pm.expect(pm.response.json().length).to.equal(10);",
									"});"
								],
								"id": "4fcabc6d-2e90-4d07-b9df-d060077eb08f",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/channels/1/messages?before={{beforeDate}}&count=10",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"1",
								"messages"
							],
							"query": [
								{
									"key": "before",
									"value": "{{beforeDate}}",
									"equals": true
								},
								{
									"key": "count",
									"value": "10",
									"equals": true
								}
							]
						},
						"description": "Tests that it is possible to retrieve messages from a channel."
					},
					"response": []
				},
				{
					"name": "Messages/Channels/Messages-AuthenticatedDefault",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"type\" : \"array\",",
									"    \"items\" : {",
									"        \"required\": [",
									"    \t\t\"id\",",
									"    \t\t\"creationTime\",",
									"    \t\t\"content\",",
									"    \t\t\"sender\"",
									"    \t],",
									"    \t\"type\": \"object\",",
									"    \t\"properties\": {",
									"    \t\t\"id\": {",
									"    \t\t\t\"format\": \"int32\",",
									"    \t\t\t\"type\": \"integer\"",
									"    \t\t},",
									"    \t\t\"creationTime\": {",
									"    \t\t\t\"format\": \"date-time\",",
									"    \t\t\t\"type\": \"string\"",
									"    \t\t},",
									"    \t\t\"content\": {",
									"    \t\t\t\"type\": \"string\"",
									"    \t\t},",
									"    \t\t\"deletionDate\": {",
									"    \t\t\t\"format\": \"date-time\",",
									"    \t\t\t\"type\": [ \"string\", \"null\" ]",
									"    \t\t},",
									"    \t\t\"lastEdited\": {",
									"    \t\t\t\"format\": \"date-time\",",
									"    \t\t\t\"type\": [ \"string\", \"null\" ]",
									"    \t\t},",
									"    \t\t\"sender\": {",
									"    \t\t\t\"required\": [ \"id\", \"firstName\", \"lastName\", \"email\", \"me\" ],",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"id\": {",
									"                        \"format\": \"int32\",",
									"                        \"type\": \"integer\"",
									"                    },",
									"                    \"firstName\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"middleInitial\": {",
									"                        \"type\": [ \"string\", \"null\" ]",
									"                    },",
									"                    \"lastName\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"email\": {",
									"                        \"type\": \"string\"",
									"                    },",
									"                    \"me\": {",
									"                        \"type\": \"boolean\"",
									"                    },",
									"                    \"isDeleted\": {",
									"                        \"type\": \"boolean\"",
									"                    }",
									"                }",
									"    \t\t}",
									"    \t}",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);",
									"",
									"//Ensure that 25 messages were fetched",
									"pm.test('Received the correct number of messages', function() {",
									"    pm.expect(pm.response.json().length).to.equal(25);",
									"});"
								],
								"id": "831fce89-55c7-4ed7-907b-2f48afd7b19e",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/channels/1/messages",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"1",
								"messages"
							]
						},
						"description": "Tests that it is possible to retrieve messages from a channel using the default parameters."
					},
					"response": []
				},
				{
					"name": "Messages/Channels/Messages-AuthenticatedBadId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "f43b769f-3b70-4ffe-812f-b4effad31a45",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/channels/0/messages",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"0",
								"messages"
							]
						},
						"description": "Tests that it is not possible to retrieve messages from a nonexisting channel."
					},
					"response": []
				},
				{
					"name": "Messages/Channels/Messages-AuthenticatedNotMember",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "b00099d2-42e0-47c5-bb33-29341a1e3878",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/channels/37/messages",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"37",
								"messages"
							]
						},
						"description": "Tests that it is not possible to retrieve messages from a channel that the client does not have access to."
					},
					"response": []
				},
				{
					"name": "Messages/Channels/Messages-AuthenticatedDeletedChannel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "b00099d2-42e0-47c5-bb33-29341a1e3878",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/channels/4/messages",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"4",
								"messages"
							]
						},
						"description": "Tests that it is not possible to retrieve messages from a channel that has been deleted."
					},
					"response": []
				},
				{
					"name": "Messages-AuthenticatedMine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"required\": [",
									"\t\t\"id\",",
									"\t\t\"creationTime\",",
									"\t\t\"content\",",
									"\t\t\"sender\"",
									"\t],",
									"\t\"type\": \"object\",",
									"\t\"properties\": {",
									"\t\t\"id\": {",
									"\t\t\t\"format\": \"int32\",",
									"\t\t\t\"type\": \"integer\"",
									"\t\t},",
									"\t\t\"creationTime\": {",
									"\t\t\t\"format\": \"date-time\",",
									"\t\t\t\"type\": \"string\"",
									"\t\t},",
									"\t\t\"content\": {",
									"\t\t\t\"type\": \"string\"",
									"\t\t},",
									"\t\t\"deletionDate\": {",
									"\t\t\t\"format\": \"date-time\",",
									"\t\t\t\"type\": [ \"string\", \"null\" ]",
									"\t\t},",
									"\t\t\"lastEdited\": {",
									"\t\t\t\"format\": \"date-time\",",
									"\t\t\t\"type\": [ \"string\", \"null\" ]",
									"\t\t},",
									"\t\t\"sender\": {",
									"\t\t\t\"required\": [ \"id\", \"firstName\", \"lastName\", \"email\", \"me\" ],",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"id\": {",
									"                    \"format\": \"int32\",",
									"                    \"type\": \"integer\"",
									"                },",
									"                \"firstName\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"middleInitial\": {",
									"                    \"type\": [ \"string\", \"null\" ]",
									"                },",
									"                \"lastName\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"email\": {",
									"                    \"type\": \"string\"",
									"                },",
									"                \"me\": {",
									"                    \"type\": \"boolean\"",
									"                },",
									"                \"isDeleted\": {",
									"                    \"type\": \"boolean\"",
									"                }",
									"            }",
									"\t\t}",
									"\t}",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);",
									"",
									"//Ensure that the message is correctly marked as written by this client",
									"pm.test('Message marked as written by this client', function() {",
									"    pm.expect(pm.response.json().sender.me).to.be.true;",
									"});"
								],
								"id": "ce4acecc-76be-4ee5-9e9d-9de0fb015cf1",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/messages/125",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"messages",
								"125"
							]
						},
						"description": "Tests that it is possible to retrieve a message by its id if the client has access to the channel containing the message. Also tests that the message is marked as written by the calling client."
					},
					"response": []
				},
				{
					"name": "Messages-AuthenticatedNotMine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the message is not marked as written by this client",
									"pm.test('Message is not marked as written by this client', function() {",
									"    pm.expect(pm.response.json().sender.me).to.be.false;",
									"});"
								],
								"id": "6612a90f-a057-4492-a2f4-f2e1eb80a274",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/messages/128",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"messages",
								"128"
							]
						},
						"description": "Tests that it is possible to retrieve a message by its id if the client has access to the channel containing the message. Also tests that the message is not marked as written by the calling client."
					},
					"response": []
				},
				{
					"name": "Messages-AuthenticatedNoAccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "aee27d7e-9e25-41e6-ae02-256ef80e2cb4",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/messages/560",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"messages",
								"560"
							]
						},
						"description": "Tests that it is not possible to retrieve a message in a channel that the client does not have access to."
					},
					"response": []
				},
				{
					"name": "Messages-AuthenticatedBadId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"id": "d0b75ea1-e90c-4bca-a626-ddbf67ba81a9",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/messages/0",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"messages",
								"0"
							]
						},
						"description": "Tests that requesting a nonexistent message returns the status code 404."
					},
					"response": []
				},
				{
					"name": "Messages-AuthenticatedDeletedChannel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "239928b9-6b21-4799-bf5d-4b43712b50b9",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/messages/123",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"messages",
								"123"
							]
						},
						"description": "Tests that requesting a message from a deleted channel returns the status code 404."
					},
					"response": []
				},
				{
					"name": "Messages/Channels/Messages-AuthenticatedValid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"id": "c606ae18-1a04-4e04-b421-bf35888261d0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"This is a test message from Postman!\""
						},
						"url": {
							"raw": "{{chatex}}/channels/45/messages",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"45",
								"messages"
							]
						},
						"description": "Tests that it is possible to post a message to a channel that the client has access to."
					},
					"response": []
				},
				{
					"name": "Messages/Channels/Messages-AuthenticatedEmptyBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"id": "d45ceef1-177e-473d-a8e5-f7c6ed6ad6d1",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{chatex}}/channels/45/messages",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"45",
								"messages"
							]
						},
						"description": "Tests that it is not possible to post an empty message to a channel."
					},
					"response": []
				},
				{
					"name": "Messages/Channels/Messages-AuthenticatedNoAccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "bb7dbd53-d35b-49d2-bda1-fb21b6a4d92f",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"This is a test message from Postman!\""
						},
						"url": {
							"raw": "{{chatex}}/channels/37/messages",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"37",
								"messages"
							]
						},
						"description": "Tests that it is not possible to post a message to a channel that the client does not have access to."
					},
					"response": []
				},
				{
					"name": "Messages/Channels/Messages-AuthenticatedInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"id": "c8f85421-8c4a-4045-9c75-0caa1c92625c",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"This is a test message from Postman!\""
						},
						"url": {
							"raw": "{{chatex}}/channels/0/messages",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"0",
								"messages"
							]
						},
						"description": "Tests that it is not possible to post a message to a nonexistent channel."
					},
					"response": []
				},
				{
					"name": "Messages/Channels/Messages-AuthenticatedDeletedChannel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"id": "016fa0fd-829d-4f49-9e75-5837629f979f",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"This is a test message from Postman!\""
						},
						"url": {
							"raw": "{{chatex}}/channels/4/messages",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"channels",
								"4",
								"messages"
							]
						},
						"description": "Tests that it is not possible to post a message to a channel that has been deleted."
					},
					"response": []
				},
				{
					"name": "Messages/Channels/Messages-AuthenticatedMine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//Ensure that the message was actually marked as deleted",
									"pm.test(\"Message was successfully deleted\", function () {",
									"   const getMessageRequest = {",
									"      url:      pm.environment.get(\"chatex\") + \"/messages/\" + pm.environment.get(\"ownMessageId\"),",
									"      method:   \"GET\",",
									"      header:   \"token:\" + pm.environment.get(\"token\")",
									"    };",
									"    ",
									"    pm.sendRequest(getMessageRequest, function(err, res) {",
									"        if (err) {",
									"            console.log(err);",
									"        } else {",
									"            pm.environment.set(\"deletionDate\", res.json().deletionDate);",
									"        }",
									"    });",
									"    ",
									"    pm.expect(pm.environment.get(\"deletionDate\")).to.not.be.null;",
									"    postman.clearEnvironmentVariable(\"deletionDate\"); //Not working?",
									"    //pm.environment.unset(\"deletionDate\"); This does not work either",
									"});"
								],
								"id": "0e4ea11b-cc5a-465d-849b-68077dc8636f",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get the id of the message to delete",
									"const getMessageRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/channels/45/messages?count=1\",",
									"  method:   \"GET\",",
									"  header:   \"token:\" + pm.environment.get(\"token\")",
									"};",
									"",
									"pm.sendRequest(getMessageRequest, function(err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.environment.set(\"ownMessageId\", res.json()[0].id);",
									"    }",
									"});"
								],
								"id": "c3005acd-6c82-4ce3-9ae8-2da33196d6d7",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/messages/{{ownMessageId}}",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"messages",
								"{{ownMessageId}}"
							]
						},
						"description": "Tests that it is possible for at client to delete its own messages."
					},
					"response": []
				},
				{
					"name": "Messages/Channels/Messages-AuthenticatedNotMine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "94a54172-a462-48cf-957d-bd8f74dc513c",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/messages/593",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"messages",
								"593"
							]
						},
						"description": "Tests that it is not possible to delete others' messages."
					},
					"response": []
				},
				{
					"name": "Messages/Channels/Messages-AuthenticatedMineNoChannelAccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//Ensure that the message was actually marked as deleted",
									"pm.test(\"Message was successfully deleted\", function () {",
									"   const getMessageRequest = {",
									"      url:      pm.environment.get(\"chatex\") + \"/messages/594\",",
									"      method:   \"GET\",",
									"      header:   \"token:\" + pm.environment.get(\"adminToken\")",
									"    };",
									"    ",
									"    pm.sendRequest(getMessageRequest, function(err, res) {",
									"        if (err) {",
									"            console.log(err);",
									"        } else {",
									"            pm.environment.set(\"deletionDate\", res.json().deletionDate);",
									"        }",
									"    });",
									"    ",
									"    pm.expect(pm.environment.get(\"deletionDate\")).to.not.be.null;",
									"    postman.clearEnvironmentVariable(\"deletionDate\"); //Not working?",
									"    //pm.environment.unset(\"deletionDate\"); This does not work either",
									"});"
								],
								"id": "7c3a87ea-121f-4c75-b594-700b49a4a5da",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get administrator token",
									"const getTokenRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/users/login\",",
									"  method:   \"Post\",",
									"  header:   \"Content-Type:application/json\",",
									"  body: {",
									"      mode: \"raw\",",
									"      raw: JSON.stringify({ email: \"kdavi16@student.sdu.dk\", password: \"abc123\"})",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, function(err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.environment.set(\"adminToken\", res.json());",
									"    }",
									"});"
								],
								"id": "831d3660-2566-4153-bf76-13beaec02f24",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/messages/594",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"messages",
								"594"
							]
						},
						"description": "Tests that a client can delete its own message, even if it is in a channel that the client does not have access to."
					},
					"response": []
				},
				{
					"name": "Messages/Channels/Messages-AuthenticatedNotMineAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"id": "8798ca7f-587e-45b1-b3d9-835225e8dec0",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get id of message to delete",
									"const getMessageRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/channels/45/messages?count=1\",",
									"  method:   \"GET\",",
									"  header:   \"token:\" + pm.environment.get(\"token\")",
									"};",
									"",
									"pm.sendRequest(getMessageRequest, function(err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.environment.set(\"otherMessageId\", res.json()[0].id);",
									"    }",
									"});",
									"",
									"//Get administrator token",
									"const getTokenRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/users/login\",",
									"  method:   \"Post\",",
									"  header:   \"Content-Type:application/json\",",
									"  body: {",
									"      mode: \"raw\",",
									"      raw: JSON.stringify({ email: \"kdavi16@student.sdu.dk\", password: \"abc123\"})",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, function(err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.environment.set(\"adminToken\", res.json());",
									"    }",
									"});"
								],
								"id": "86925c11-e76c-42b7-be03-d3c4b3788345",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{adminToken}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/messages/{{otherMessageId}}",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"messages",
								"{{otherMessageId}}"
							]
						},
						"description": "Tests that it is possible for a group administrator to delete other's messages in the group's channels."
					},
					"response": []
				},
				{
					"name": "Messages/Channels/Messages-AuthenticatedDeletedChannel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"id": "60136a7d-1c26-49d0-81af-f542ea44873d",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "67c78ae9-e244-4f24-b624-8e489b701f44",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{adminToken}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/messages/123",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"messages",
								"123"
							]
						},
						"description": "Tests that it is not possible to delete a message in a deleted channel."
					},
					"response": []
				},
				{
					"name": "Messages-AuthenticatedMine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//Tests that the message was in fact edited",
									"pm.test(\"Message was succesfully edited\", function() {",
									"    const getMessageRequest = {",
									"      url:      pm.environment.get(\"chatex\") + \"/messages/592\",",
									"      method:   \"GET\",",
									"      header:   \"token:\" + pm.environment.get(\"token\")",
									"    };",
									"    ",
									"    pm.sendRequest(getMessageRequest, function(err, res) {",
									"        if (err) {",
									"            console.log(err);",
									"        } else {",
									"            pm.environment.set(\"editDate\", res.json().lastEdited);",
									"        }",
									"    });",
									"    ",
									"    pm.expect(pm.environment.get(\"editDate\")).to.not.be.null;",
									"    postman.clearEnvironmentVariable(\"editDate\"); //Not working?",
									"    //pm.environment.unset(\"editDate\"); This does not work either",
									"});"
								],
								"id": "47d09f5c-119e-40df-88c9-dd8a4dbc8d9b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"New text here\""
						},
						"url": {
							"raw": "{{chatex}}/messages/592",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"messages",
								"592"
							]
						},
						"description": "Tests that it is possible for a client to edit its own message."
					},
					"response": []
				},
				{
					"name": "Messages-AuthenticatedNotMine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "190ebb3e-8158-4668-8d20-2efe59cc6c3a",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"New text here\""
						},
						"url": {
							"raw": "{{chatex}}/messages/593",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"messages",
								"593"
							]
						},
						"description": "Tests that it is not possible for a client to edit others' messages."
					},
					"response": []
				},
				{
					"name": "Messages-AuthenticatedNotMineAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"id": "c98510b6-050b-4aa3-b79e-804207d8034e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Get administrator token",
									"const getTokenRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/users/login\",",
									"  method:   \"Post\",",
									"  header:   \"Content-Type:application/json\",",
									"  body: {",
									"      mode: \"raw\",",
									"      raw: JSON.stringify({ email: \"kdavi16@student.sdu.dk\", password: \"abc123\"})",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, function(err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.environment.set(\"adminToken\", res.json());",
									"    }",
									"});"
								],
								"id": "153f2ab4-9780-4a61-a6ad-282035dc99af",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"New text here\""
						},
						"url": {
							"raw": "{{chatex}}/messages/592",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"messages",
								"592"
							]
						},
						"description": "Tests that it is possible for a group administrator to edit others' messages."
					},
					"response": []
				},
				{
					"name": "Messages-AuthenticatedMineDeletedChannel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"id": "980ba2d1-9adc-4df6-89b9-b094d6cc42ed",
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "60d57412-2d4f-4133-acb2-f523ab63c3a0",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"New text here\""
						},
						"url": {
							"raw": "{{chatex}}/messages/123",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"messages",
								"123"
							]
						},
						"description": "Tests that it is not possible to edit a message in a deleted channel."
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles",
			"description": "Tests for the RolesApi",
			"item": [
				{
					"name": "Roles-Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"type\" : \"array\",",
									"    \"items\" : {",
									"        \"required\": [",
									"\t\t\t\"id\",",
									"\t\t\t\"name\",",
									"\t\t\t\"isDeleted\"",
									"\t\t],",
									"\t\t\"type\": \"object\",",
									"\t\t\"properties\": {",
									"\t\t\t\"id\": {",
									"\t\t\t\t\"format\": \"int32\",",
									"\t\t\t\t\"type\": \"integer\"",
									"\t\t\t},",
									"\t\t\t\"name\": {",
									"\t\t\t\t\"type\": \"string\"",
									"\t\t\t},",
									"\t\t\t\"isDeleted\": {",
									"\t\t\t\t\"type\": \"boolean\"",
									"\t\t\t}",
									"\t\t}",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);"
								],
								"id": "7a28b1e0-50eb-4b18-96e7-6a805c5ad45e",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/roles",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"roles"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"description": "Tests for the UsersApi",
			"item": [
				{
					"name": "Users/Login-Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "08e2c0ab-ba1a-4358-8140-2fdfde6f93d2",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"amhof16@student.sdu.dk\",\r\n  \"password\": \"abc\"\r\n}"
						},
						"url": {
							"raw": "{{chatex}}/users/login",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"users",
								"login"
							]
						},
						"description": "Tests that a user cannot login when providing invalid credentials. In this case the user should receive a status code 403."
					},
					"response": []
				},
				{
					"name": "Users/Login-Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response body contains the correct token",
									"pm.test(\"Body contains a token\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"token\"));",
									"});"
								],
								"id": "7d7ee8db-3b18-4a4f-a0f4-96c4ccecf2c9",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"amhof16@student.sdu.dk\",\r\n  \"password\": \"abc123\"\r\n}"
						},
						"url": {
							"raw": "{{chatex}}/users/login",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"users",
								"login"
							]
						},
						"description": "Tests that a user can log in when providing valid credentials."
					},
					"response": []
				},
				{
					"name": "Users/Login-Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"id": "976403fc-8bb4-43ec-a582-1ce4c5d3f30d",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{chatex}}/users/login",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"users",
								"login"
							]
						},
						"description": "Tests that a request with an empty body results in a bad request."
					},
					"response": []
				},
				{
					"name": "Users/Roles-Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"type\" : \"array\",",
									"    \"items\" : {",
									"        \"type\" : \"object\",",
									"        \"required\" : [ \"id\", \"name\", \"isDeleted\" ],",
									"        \"properties\" : {",
									"            \"id\" : {",
									"                \"type\" : \"integer\",",
									"                \"format\" : \"int32\"",
									"            },",
									"            \"name\" : {",
									"                \"type\" : \"string\"",
									"            },",
									"            \"isDeleted\" : {",
									"                \"type\" : \"boolean\"",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);"
								],
								"id": "d801ee4f-2206-4c05-b4c1-c325d4f83806",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/users/5",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"users",
								"5"
							]
						},
						"description": "Tests that it is possible to retrieve roles on a user when requesting from an authorized client."
					},
					"response": []
				},
				{
					"name": "Users/Roles-AuthenticatedBadId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that no roles were retrieved",
									"pm.test(\"No roles retrieved\", function () {",
									"    pm.expect(pm.response.json().length).to.equal(0);",
									"});"
								],
								"id": "3d4ef256-9e97-4396-bb1c-1103aabf827e",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/users/4",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"users",
								"4"
							]
						},
						"description": "Tests that requesting roles on a nonexisting user results in the status code 404."
					},
					"response": []
				},
				{
					"name": "Users/Roles-NoToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"id": "98493e43-d4ea-4cba-9f56-704dc704b62a",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{chatex}}/users/5",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"users",
								"5"
							]
						},
						"description": "Tests that requesting roles on a user without providing a token results in the status code 401."
					},
					"response": []
				},
				{
					"name": "Users/Me/Groups-Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"type\" : \"array\",",
									"    \"items\" : {",
									"        \"type\" : \"object\",",
									"        \"required\" : [ \"id\", \"name\" ],",
									"        \"properties\" : {",
									"            \"id\" : {",
									"                \"type\" : \"integer\",",
									"                \"format\" : \"int32\"",
									"            },",
									"            \"name\" : {",
									"                \"type\" : \"string\"",
									"            },",
									"            \"channels\" : {",
									"                \"type\" : \"array\",",
									"                \"items\" : {",
									"                    \"type\" : \"object\",",
									"                    \"required\" : [ \"id\", \"name\" ],",
									"                    \"properties\" : {",
									"                        \"id\" : {",
									"                            \"type\" : \"integer\",",
									"                            \"format\" : \"int32\"",
									"                        },",
									"                        \"name\" : {",
									"                            \"type\" : \"string\"",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);"
								],
								"id": "434cf702-faa1-4653-bf3d-1001704144fe",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/users/me/groups",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"users",
								"me",
								"groups"
							]
						},
						"description": "Tests that it is possible to request a user's own groups when providing a valid token."
					},
					"response": []
				},
				{
					"name": "Users/Me/Groups-AuthenticatedConsiderRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52626cea-6269-48b3-87a4-a14d5ef95b14",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"type\" : \"array\",",
									"    \"items\" : {",
									"        \"type\" : \"object\",",
									"        \"required\" : [ \"id\", \"name\" ],",
									"        \"properties\" : {",
									"            \"id\" : {",
									"                \"type\" : \"integer\",",
									"                \"format\" : \"int32\"",
									"            },",
									"            \"name\" : {",
									"                \"type\" : \"string\"",
									"            },",
									"            \"channels\" : {",
									"                \"type\" : \"array\",",
									"                \"items\" : {",
									"                    \"type\" : \"object\",",
									"                    \"required\" : [ \"id\", \"name\" ],",
									"                    \"properties\" : {",
									"                        \"id\" : {",
									"                            \"type\" : \"integer\",",
									"                            \"format\" : \"int32\"",
									"                        },",
									"                        \"name\" : {",
									"                            \"type\" : \"string\"",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);",
									"",
									"//Ensure that the correct groups were retrieved",
									"var expectedGroupIds = [ 1, pm.environment.get(\"testGroupId\") ];",
									"var actualGroupIds = [];",
									"",
									"for (i = 0; i < pm.response.json().length; i++) {",
									"    actualGroupIds.push(pm.response.json()[i].id);",
									"}",
									"",
									"pm.test('Correct groups retrieved', function() {",
									"    var noUnmatchedGroup = true;",
									"    for (var group in expectedGroupIds) {",
									"        if (actualGroupIds.indexOf(group) === -1) {",
									"            unmatchedGroup = false;",
									"        }",
									"    }",
									"    ",
									"    var sameNumber = (expectedGroupIds.length === actualGroupIds.length);",
									"    ",
									"    pm.expect(noUnmatchedGroup && sameNumber).to.be.true;",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "53b35d27-0116-4929-bf4c-c92e4582f45d",
								"type": "text/javascript",
								"exec": [
									"//Get postman token",
									"const getTokenRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/users/login\",",
									"  method:   \"Post\",",
									"  header:   \"Content-Type:application/json\",",
									"  body: {",
									"      mode: \"raw\",",
									"      raw: JSON.stringify({ email: \"postman@pm.com\", password: \"abc123\"})",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, function(err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.environment.set(\"postmanToken\", res.json());",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{postmanToken}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/users/me/groups",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"users",
								"me",
								"groups"
							]
						},
						"description": "Tests that it is possible to request a user's own groups when providing a valid token, and when considering the user's roles."
					},
					"response": []
				},
				{
					"name": "Users/Me/Groups-AuthenticatedConsiderMix",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85bcd822-e7bc-4617-bf16-c09337dcd161",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"type\" : \"array\",",
									"    \"items\" : {",
									"        \"type\" : \"object\",",
									"        \"required\" : [ \"id\", \"name\" ],",
									"        \"properties\" : {",
									"            \"id\" : {",
									"                \"type\" : \"integer\",",
									"                \"format\" : \"int32\"",
									"            },",
									"            \"name\" : {",
									"                \"type\" : \"string\"",
									"            },",
									"            \"channels\" : {",
									"                \"type\" : \"array\",",
									"                \"items\" : {",
									"                    \"type\" : \"object\",",
									"                    \"required\" : [ \"id\", \"name\" ],",
									"                    \"properties\" : {",
									"                        \"id\" : {",
									"                            \"type\" : \"integer\",",
									"                            \"format\" : \"int32\"",
									"                        },",
									"                        \"name\" : {",
									"                            \"type\" : \"string\"",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);",
									"",
									"//Ensure that the correct groups were retrieved",
									"var expectedGroupIds = [ 1 ];",
									"var actualGroupIds = [];",
									"",
									"for (i = 0; i < pm.response.json().length; i++) {",
									"    actualGroupIds.push(pm.response.json()[i].id);",
									"}",
									"",
									"pm.test('Correct groups retrieved', function() {",
									"    var noUnmatchedGroup = true;",
									"    for (var group in expectedGroupIds) {",
									"        if (actualGroupIds.indexOf(group) === -1) {",
									"            unmatchedGroup = false;",
									"        }",
									"    }",
									"    ",
									"    var sameNumber = (expectedGroupIds.length === actualGroupIds.length);",
									"    ",
									"    pm.expect(noUnmatchedGroup && sameNumber).to.be.true;",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d45ae83d-9980-4067-b4de-14bd4198db38",
								"type": "text/javascript",
								"exec": [
									"//Get postman token",
									"const getTokenRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/users/login\",",
									"  method:   \"Post\",",
									"  header:   \"Content-Type:application/json\",",
									"  body: {",
									"      mode: \"raw\",",
									"      raw: JSON.stringify({ email: \"postman@pm.com\", password: \"abc123\"})",
									"  }",
									"};",
									"",
									"pm.sendRequest(getTokenRequest, function(err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.environment.set(\"postmanToken\", res.json());",
									"    }",
									"});",
									"",
									"//Remove group role",
									"const removeRoleRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/groups/\" + pm.environment.get(\"testGroupId\") + \"/roles\",",
									"  method:   \"DELETE\",",
									"  header:   [ \"Content-Type:application/json\", \"token:\" + pm.environment.get(\"token\") ],",
									"  body: {",
									"      mode: \"raw\",",
									"      raw: \"[1]\"",
									"  }",
									"};",
									"",
									"pm.sendRequest(removeRoleRequest, function(err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{postmanToken}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/users/me/groups",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"users",
								"me",
								"groups"
							]
						},
						"description": "Tests that it is possible to request a user's own groups when providing a valid token, and when considering a mix of role- and direct memberships."
					},
					"response": []
				},
				{
					"name": "Users/Me/Groups-NoToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"id": "81ecdf6e-48ab-436c-b2f0-ffd86851fd28",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{chatex}}/users/me/groups",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"users",
								"me",
								"groups"
							]
						},
						"description": "Tests that requesting groups without a valid token results in the status code 401."
					},
					"response": []
				},
				{
					"name": "Users-Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Ensure that the response has the correct schema",
									"var schema = {",
									"    \"type\" : \"array\",",
									"    \"items\" : {",
									"        \"required\": [ \"id\", \"firstName\", \"lastName\", \"email\", \"me\" ],",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": {",
									"                \"format\": \"int32\",",
									"                \"type\": \"integer\"",
									"            },",
									"            \"firstName\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"middleInitial\": {",
									"                \"type\": [ \"string\", \"null\" ]",
									"            },",
									"            \"lastName\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"email\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"me\": {",
									"                \"type\": \"boolean\"",
									"            },",
									"            \"isDeleted\": {",
									"                \"type\": \"boolean\"",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"console.log(tv4.error);"
								],
								"id": "db45c596-d243-45b3-bebe-815b885fac3c",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/users",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Tests that it is possible to retrieve a list of all users from an authenticated client."
					},
					"response": []
				},
				{
					"name": "Users-NoToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"id": "2ce2b699-383d-4f5e-ab6a-50e6ad06a76b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{chatex}}/users",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Tests that requesting users without a valid token results in the status code 401."
					},
					"response": []
				}
			]
		},
		{
			"name": "GroupsLast",
			"description": "",
			"item": [
				{
					"name": "Groups/Admins-AuthenticatedAddNotAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6cb0d20-7564-4863-9330-29d7356ed9ab",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{postmanToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "true"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/5",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"5"
							]
						},
						"description": "Tests that it is not possible to add an administrator to a group if the client is not an administrator."
					},
					"response": []
				},
				{
					"name": "Groups/Admins-AuthenticatedAdd",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba05e884-1bc8-40d5-a51c-738e2d848ccc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//Ensure that the user is now an admin",
									"const getAdminsRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/groups/\" + pm.environment.get(\"testGroupId\") + \"/admins\",",
									"  method:   \"GET\",",
									"  header:   \"token:\" + pm.environment.get(\"token\")",
									"};",
									"",
									"pm.sendRequest(getAdminsRequest, function(err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        var adminAdded = false;",
									"        ",
									"        for (var i = 0; i < res.json().length; i++) {",
									"            if (res.json()[i].id == 5) {",
									"                adminAdded = true;",
									"            }",
									"        }",
									"        ",
									"        pm.test(\"Admin was added\", function () {",
									"            pm.expect(adminAdded).to.be.true;",
									"        });",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "true"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/5",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"5"
							]
						},
						"description": "Tests that it is possible to add an administrator to a group if the client is also an administrator."
					},
					"response": []
				},
				{
					"name": "Groups/Admins-AuthenticatedRemoveNotAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6cb0d20-7564-4863-9330-29d7356ed9ab",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{postmanToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "false"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/5",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"5"
							]
						},
						"description": "Tests that it is not possible to remove an administrator from a group if the client is not an administrator."
					},
					"response": []
				},
				{
					"name": "Groups/Admins-AuthenticatedRemove",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "729c4198-7eee-4e94-bc7a-12e45e373dcd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//Ensure that the user is now an admin",
									"const getAdminsRequest = {",
									"  url:      pm.environment.get(\"chatex\") + \"/groups/\" + pm.environment.get(\"testGroupId\") + \"/admins\",",
									"  method:   \"GET\",",
									"  header:   \"token:\" + pm.environment.get(\"token\")",
									"};",
									"",
									"pm.sendRequest(getAdminsRequest, function(err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        var adminRemoved = true;",
									"        ",
									"        for (var i = 0; i < res.json().length; i++) {",
									"            if (res.json()[i].id == 5) {",
									"                adminRemoved = false;",
									"            }",
									"        }",
									"        ",
									"        pm.test(\"Admin was removed\", function () {",
									"            pm.expect(adminRemoved).to.be.true;",
									"        });",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "false"
						},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}/5",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}",
								"5"
							]
						},
						"description": "Tests that it is possible to remove an administrator from a group if the client is also an administrator."
					},
					"response": []
				},
				{
					"name": "Groups-AuthenticatedBadId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45b6df32-f6ac-4889-a76d-38ba12f520b1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/groups/0",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"0"
							]
						},
						"description": "Tests that it is not possible to delete a group that does not exist."
					},
					"response": []
				},
				{
					"name": "Groups-AuthenticatedNotAdministrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45b6df32-f6ac-4889-a76d-38ba12f520b1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{postmanToken}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}"
							]
						},
						"description": "Tests that it is not possible to delete a group that the client is not an administrator of."
					},
					"response": []
				},
				{
					"name": "Groups-Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d554501-f7b5-4581-b816-2730770c3c80",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{token}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{chatex}}/groups/{{testGroupId}}",
							"host": [
								"{{chatex}}"
							],
							"path": [
								"groups",
								"{{testGroupId}}"
							]
						},
						"description": "Tests that it is possible to delete a group if the client is a group administrator."
					},
					"response": []
				}
			]
		}
	]
}